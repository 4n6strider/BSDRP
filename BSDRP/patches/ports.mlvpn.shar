# This is a shell archive.  Save it in a file, remove anything before
# this line, and then unpack it by entering "sh file".  Note, it may
# create directories; files and directories will be owned by you and
# have default permissions.
#
# This archive contains:
#
#	net/mlvpn
#	net/mlvpn/Makefile
#	net/mlvpn/distinfo
#	net/mlvpn/pkg-plist
#	net/mlvpn/files
#	net/mlvpn/files/patch-src_mlvpn.c
#	net/mlvpn/files/mlvpn.in
#	net/mlvpn/files/patch-src_tuntap__bsd.c
#	net/mlvpn/files/patch-src_config.c
#	net/mlvpn/files/patch-src_mlvpn.h
#	net/mlvpn/pkg-descr
#
echo c - net/mlvpn
mkdir -p net/mlvpn > /dev/null 2>&1
echo x - net/mlvpn/Makefile
sed 's/^X//' >net/mlvpn/Makefile << '990e8e82b10a6a0fbf8dafc14279f78a'
X# $FreeBSD$
X
XPORTNAME=	mlvpn
XPORTVERSION=	2.3.1
XCATEGORIES=	net
X
XMAINTAINER=	olivier@FreeBSD.org
XCOMMENT=	Multi-link VPN
X
XLICENSE=	BSD2CLAUSE
XLICENSE_FILE=	${WRKSRC}/LICENCE
X
XLIB_DEPENDS=	libev.so:devel/libev \
X		libsodium.so:security/libsodium
X
XUSE_GITHUB=	yes
XGH_PROJECT=	MLVPN
XGH_ACCOUNT=	zehome
X
XUSES=	autoreconf libtool pkgconfig localbase
XGNU_CONFIGURE=	yes
X
XUSERS=		mlvpn
XGROUPS=		mlvpn
XUSE_RC_SUBR=	mlvpn
X
XOPTIONS_DEFINE=	CONTROL
XCONTROL_DESC=	Enable UNIX socket/HTTP json remote control API
X
XOPTIONS_DEFAULT=	CONTROL
XCONTROL_CONFIGURE_OFF=	--disable-control
X
Xdo-install:
X	${INSTALL_PROGRAM} ${WRKSRC}/src/${PORTNAME} ${STAGEDIR}${PREFIX}/sbin/
X	${INSTALL_MAN} ${WRKSRC}/man/${PORTNAME}.1 ${STAGEDIR}${PREFIX}/man/man1
X	${INSTALL_MAN} ${WRKSRC}/man/${PORTNAME}.conf.5	${STAGEDIR}${PREFIX}/man/man5
X	@${MKDIR} ${STAGEDIR}${ETCDIR}
X	${INSTALL_MAN} ${WRKSRC}/doc/examples/${PORTNAME}.conf.in ${STAGEDIR}${ETCDIR}/${PORTNAME}.conf.sample
X	${INSTALL_SCRIPT} ${WRKSRC}/doc/examples/mlvpn_updown.sh.in ${STAGEDIR}${ETCDIR}/mlvpn_updown.sh
X
X.include <bsd.port.mk>
990e8e82b10a6a0fbf8dafc14279f78a
echo x - net/mlvpn/distinfo
sed 's/^X//' >net/mlvpn/distinfo << 'd6a304b87799dd1c9fceb2ece414a30c'
XSHA256 (zehome-MLVPN-2.3.1_GH0.tar.gz) = 4bbe8ae10ccad4ba764d29db0293b3ab523ded5d0a0b5adbe6a8d4d839e4138e
XSIZE (zehome-MLVPN-2.3.1_GH0.tar.gz) = 83817
d6a304b87799dd1c9fceb2ece414a30c
echo x - net/mlvpn/pkg-plist
sed 's/^X//' >net/mlvpn/pkg-plist << '02b20181f9af8dbd603c276b26ff2ebb'
Xsbin/mlvpn
Xman/man1/mlvpn.1.gz
Xman/man5/mlvpn.conf.5.gz
X@sample(,,600)  %%ETCDIR%%/mlvpn.conf.sample
X@(,,700) %%ETCDIR%%/mlvpn_updown.sh
02b20181f9af8dbd603c276b26ff2ebb
echo c - net/mlvpn/files
mkdir -p net/mlvpn/files > /dev/null 2>&1
echo x - net/mlvpn/files/patch-src_mlvpn.c
sed 's/^X//' >net/mlvpn/files/patch-src_mlvpn.c << 'aa93da747ec8bdeeedbb8730d3f2eb40'
X--- src/mlvpn.c.orig	2015-12-28 11:20:16 UTC
X+++ src/mlvpn.c
X@@ -597,7 +597,7 @@ mlvpn_rtun_write(EV_P_ ev_io *w, int rev
X 
X mlvpn_tunnel_t *
X mlvpn_rtun_new(const char *name,
X-               const char *bindaddr, const char *bindport,
X+               const char *bindaddr, const char *bindport, uint32_t bindfib,
X                const char *destaddr, const char *destport,
X                int server_mode, uint32_t timeout,
X                int fallback_only, uint32_t bandwidth,
X@@ -653,6 +653,7 @@ mlvpn_rtun_new(const char *name,
X         strlcpy(new->bindaddr, bindaddr, sizeof(new->bindaddr));
X     if (bindport)
X         strlcpy(new->bindport, bindport, sizeof(new->bindport));
X+	new->bindfib = bindfib;
X     if (destaddr)
X         strlcpy(new->destaddr, destaddr, sizeof(new->destaddr));
X     if (destport)
X@@ -780,6 +781,7 @@ static int
X mlvpn_rtun_start(mlvpn_tunnel_t *t)
X {
X     int ret, fd = -1;
X+	int fib = 0;
X     char *addr, *port;
X     struct addrinfo hints, *res;
X 
X@@ -788,9 +790,11 @@ mlvpn_rtun_start(mlvpn_tunnel_t *t)
X     {
X         addr = t->bindaddr;
X         port = t->bindport;
X+		fib = t->bindfib;
X     } else {
X         addr = t->destaddr;
X         port = t->destport;
X+		fib = t->bindfib;
X     }
X 
X     /* Initialize hints */
X@@ -817,6 +821,14 @@ mlvpn_rtun_start(mlvpn_tunnel_t *t)
X             log_warn(NULL, "%s socket creation error",
X                 t->name);
X         } else {
X+#if defined(HAVE_FREEBSD) || defined(HAVE_OPENBSD)
X+			/* Setting SO_SETFIB (fib) supported on FreeBSD and OpenBSD only */
X+			if (setsockopt(fd, SOL_SOCKET, SO_SETFIB, &fib, sizeof(fib)) < 0)
X+			{
X+      			log_warnx(NULL, "Cannot set FIB %d for kernel socket", fib);
X+				goto error;
X+			}
X+#endif
X             t->fd = fd;
X             break;
X         }
aa93da747ec8bdeeedbb8730d3f2eb40
echo x - net/mlvpn/files/mlvpn.in
sed 's/^X//' >net/mlvpn/files/mlvpn.in << '69a89f942046bac1559b51af2f0f4dff'
X#!/bin/sh
X#
X# mlvpn - load tun/tap driver and start mlvpn daemon
X#
X# (C) Copyright 2005 - 2008, 2010 by Matthias Andree
X# (C) Copyright 2015 Laurent COUSTET (mlvpn modifications)
X# (C) Copyright 2016 Olivier Cochard-Labbe (updating rc script)
X
X# based on suggestions by Matthias Grimm and Dirk Gouders
X# with multi-instance contribution from Denis Shaposhnikov, Gleb Kozyrev
X# and Vasil Dimov
X# softrestart feature suggested by Nick Hibma
X#
X# $FreeBSD$
X# 
X# This program is free software; you can redistribute it and/or modify it under
X# the terms of the GNU General Public License as published by the Free Software
X# Foundation; either version 2 of the License, or (at your option) any later
X# version.
X#
X# This program is distributed in the hope that it will be useful, but WITHOUT
X# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
X# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
X# details.
X#
X# You should have received a copy of the GNU General Public License along with
X# this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
X# Street, Fifth Floor, Boston, MA 02110-1301, USA.
X
X# PROVIDE: mlvpn
X# REQUIRE: DAEMON
X# KEYWORD: shutdown
X
X# -----------------------------------------------------------------------------
X#
X# This script supports running multiple instances of mlvpn
X# To run additional instances link this script to something like
X# % ln -s mlvpn mlvpn_foo
X# and define additional mlvpn_foo_* variables in one of
X# /etc/rc.conf, /etc/rc.conf.local or /etc/rc.conf.d/mlvpn_foo
X#
X# Below NAME should be substituted with the name of this script. By default
X# it is mlvpn, so read as mlvpn_enable. If you linked the script to
X# mlvpn_foo, then read as mlvpn_foo_enable etc.
X#
X# The following variables are supported (defaults are shown).
X# You can place them in any of
X# /etc/rc.conf, /etc/rc.conf.local or /etc/rc.conf.d/NAME
X#
X# NAME_enable="NO"	# set to YES to enable mlvpn
X# NAME_if=		# driver(s) to load, set to "tun", "tap" or "tun tap"
X#			# it is OK to specify the if_ prefix.
X#
X# # optional:
X# NAME_flags=				# additional command line arguments
X# NAME_configfile="/usr/local/etc/mlvpn/NAME.conf"	# --config file
X#
X# Note that we deliberately refrain from unloading drivers.
X#
X# For further documentation, please see http://www.mlvpn.fr/
X#
X
X. /etc/rc.subr
X
Xcase "$0" in
X/etc/rc*)
X	# during boot (shutdown) $0 is /etc/rc (/etc/rc.shutdown),
X	# so get the name of the script from $_file
X	name="$_file"
X	;;
X*)
X	name="$0"
X	;;
Xesac
X
Xname="${name##*/}"
Xrcvar=${name}_enable
X
Xmlvpn_stop()
X{
X	if [ -f ${pidfile} ]; then
X		rc_pid=$(check_pidfile $pidfile ${name})
X		kill -TERM $rc_pid
X		wait_for_pids $rc_pid
X	fi
X}
X
Xstop_postcmd()
X{
X	rm -f "$pidfile" || warn "Could not remove $pidfile."
X}
X
Xmlvpn_softrestart()
X{
X	rc_pid=$(check_pidfile $pidfile ${name})
X	local status
X
X	if ! status=`run_rc_command status 2>&1`; then
X		echo $status
X		return 1
X	fi
X	echo 'Softrestarting mlvpn.'
X	kill -USR1 $rc_pid
X}
X
Xmlvpn_status()
X{
X	rc_pid=$(check_pidfile $pidfile ${name})
X
X	if [ -z "$rc_pid" ]; then
X		[ -n "$rc_fast" ] && return 0
X		if [ -n "$pidfile" ]; then
X			echo "${name} not running? (check $pidfile)."
X		else
X			echo "${name} not running?"
X		fi
X		return 1
X	fi
X	echo "${name} is running as pid ${rc_pid}"
X}
X
X# reload: support SIGHUP to reparse configuration file
X# softrestart: support SIGUSR1 to reconnect without superuser privileges
Xextra_commands="reload softrestart"
Xsoftrestart_cmd="mlvpn_softrestart"
X
X# pidfile
Xpidfile="/var/run/${name}.pid"
Xrc_pid=$(check_pidfile $pidfile ame)
X
X# command and arguments
Xprocname="%%PREFIX%%/sbin/mlvpn"
Xcommand="/usr/sbin/daemon"
X
X# run this last
Xstop_cmd="mlvpn_stop"
Xstop_postcmd="stop_postcmd"
Xstatus_cmd="mlvpn_status"
X
Xload_rc_config ${name}
X
Xeval ": \${${name}_enable:=\"NO\"}"
Xeval ": \${${name}_configfile:=\"/usr/local/etc/mlvpn/${name}.conf\"}"
X
Xconfigfile="$(eval echo \${${name}_configfile})"
Xinterfaces="$(eval echo \${${name}_if})"
X
Xrequired_modules=
Xfor i in $interfaces ; do
X    required_modules="$required_modules${required_modules:+" "}if_${i#if_}"
Xdone
X
Xrequired_files=${configfile}
X
Xcommand_args="-f -p ${pidfile} ${procname} --name ${name} --config ${configfile} --user mlvpn"
X
Xrun_rc_command "$1"
69a89f942046bac1559b51af2f0f4dff
echo x - net/mlvpn/files/patch-src_tuntap__bsd.c
sed 's/^X//' >net/mlvpn/files/patch-src_tuntap__bsd.c << '8251041bfe64cc11cd4f74a95e1dfcac'
X--- src/tuntap_bsd.c.orig	2015-12-28 11:20:16 UTC
X+++ src/tuntap_bsd.c
X@@ -21,7 +21,7 @@ mlvpn_tuntap_read(struct tuntap_s *tunta
X     mlvpn_tunnel_t *rtun = NULL;
X     mlvpn_pkt_t *pkt;
X     ssize_t ret;
X-    u_char data[DEFAULT_MTU]
X+    u_char data[DEFAULT_MTU];
X     struct iovec iov[2];
X     uint32_t type;
X 
8251041bfe64cc11cd4f74a95e1dfcac
echo x - net/mlvpn/files/patch-src_config.c
sed 's/^X//' >net/mlvpn/files/patch-src_config.c << '400435283bb1976b5af44575d380d160'
X--- src/config.c.orig	2015-12-28 11:20:16 UTC
X+++ src/config.c
X@@ -269,6 +269,7 @@ mlvpn_config(int config_file_fd, int fir
X             } else if (strncmp(lastSection, "filters", 7) != 0) {
X                 char *bindaddr;
X                 char *bindport;
X+				uint32_t bindfib = 0;
X                 char *dstaddr;
X                 char *dstport;
X                 uint32_t bwlimit = 0;
X@@ -284,6 +285,9 @@ mlvpn_config(int config_file_fd, int fir
X                     _conf_set_str_from_conf(
X                         config, lastSection, "bindport", &bindport, NULL,
X                         "bind port is mandatory in server mode.\n", 1);
X+					_conf_set_uint_from_conf(
X+						config, lastSection, "bindfib", &bindfib, 0,
X+						NULL, 0);
X                     _conf_set_str_from_conf(
X                         config, lastSection, "remotehost", &dstaddr, NULL,
X                         NULL, 0);
X@@ -297,6 +301,9 @@ mlvpn_config(int config_file_fd, int fir
X                     _conf_set_str_from_conf(
X                         config, lastSection, "bindport", &bindport, NULL,
X                         NULL, 0);
X+					 _conf_set_uint_from_conf(
X+						config, lastSection, "bindfib", &bindfib, 0,
X+						NULL, 0);
X                     _conf_set_str_from_conf(
X                         config, lastSection, "remotehost", &dstaddr, NULL,
X                         "No remote address specified.\n", 1);
X@@ -336,6 +343,7 @@ mlvpn_config(int config_file_fd, int fir
X                               tmptun->name);
X                         if ((! mystr_eq(tmptun->bindaddr, bindaddr)) ||
X                                 (! mystr_eq(tmptun->bindport, bindport)) ||
X+								(tmptun->bindfib != bindfib) ||
X                                 (! mystr_eq(tmptun->destaddr, dstaddr)) ||
X                                 (! mystr_eq(tmptun->destport, dstport))) {
X                             mlvpn_rtun_status_down(tmptun);
X@@ -347,6 +355,9 @@ mlvpn_config(int config_file_fd, int fir
X                         if (bindport) {
X                             strlcpy(tmptun->bindport, bindport, sizeof(tmptun->bindport));
X                         }
X+						if (tmptun->bindfib != bindfib) {
X+							tmptun->bindfib = bindfib;
X+						}
X                         if (dstaddr) {
X                             strlcpy(tmptun->destaddr, dstaddr, sizeof(tmptun->destaddr));
X                         }
X@@ -380,7 +391,7 @@ mlvpn_config(int config_file_fd, int fir
X                 {
X                     log_info("config", "%s tunnel added", lastSection);
X                     mlvpn_rtun_new(
X-                        lastSection, bindaddr, bindport, dstaddr, dstport,
X+                        lastSection, bindaddr, bindport, bindfib, dstaddr, dstport,
X                         default_server_mode, timeout, fallback_only,
X                         bwlimit, loss_tolerence);
X                 }
400435283bb1976b5af44575d380d160
echo x - net/mlvpn/files/patch-src_mlvpn.h
sed 's/^X//' >net/mlvpn/files/patch-src_mlvpn.h << '323ace73f68e0b37890ea0410eaed2f6'
X--- src/mlvpn.h.orig	2015-12-28 11:20:16 UTC
X+++ src/mlvpn.h
X@@ -138,6 +138,7 @@ typedef struct mlvpn_tunnel_s
X     char *name;           /* tunnel name */
X     char bindaddr[MLVPN_MAXHNAMSTR]; /* packets source */
X     char bindport[MLVPN_MAXPORTSTR]; /* packets port source (or NULL) */
X+	uint32_t bindfib;     /* FIB number to use */
X     char destaddr[MLVPN_MAXHNAMSTR]; /* remote server ip (can be hostname) */
X     char destport[MLVPN_MAXPORTSTR]; /* remote server port */
X     int fd;               /* socket file descriptor */
X@@ -193,7 +194,7 @@ int mlvpn_rtun_wrr_reset(struct rtunhead
X mlvpn_tunnel_t *mlvpn_rtun_wrr_choose();
X mlvpn_tunnel_t *mlvpn_rtun_choose();
X mlvpn_tunnel_t *mlvpn_rtun_new(const char *name,
X-    const char *bindaddr, const char *bindport,
X+    const char *bindaddr, const char *bindport, uint32_t bindfib,
X     const char *destaddr, const char *destport,
X     int server_mode, uint32_t timeout,
X     int fallback_only, uint32_t bandwidth,
323ace73f68e0b37890ea0410eaed2f6
echo x - net/mlvpn/pkg-descr
sed 's/^X//' >net/mlvpn/pkg-descr << 'e63de503e27d8fbbb8b3ce47cfe84acb'
XMLVPN allow to bond your internet links to increase bandwidth, secure your 
Xinternet connection by actively monitoring your links and removing the faulty 
Xones, without loosing your TCP connections and secure your internet connection 
Xto the aggregation server using cryptography.
X
XWWW: https://zehome.github.io/MLVPN/
e63de503e27d8fbbb8b3ce47cfe84acb
exit

