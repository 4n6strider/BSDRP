# This is a shell archive.  Save it in a file, remove anything before
# this line, and then unpack it by entering "sh file".  Note, it may
# create directories; files and directories will be owned by you and
# have default permissions.
#
# This archive contains:
#
#	net/netmap-fwd
#	net/netmap-fwd/Makefile
#	net/netmap-fwd/distinfo
#	net/netmap-fwd/files
#	net/netmap-fwd/files/patch-rybsync
#	net/netmap-fwd/files/patch-util.h
#	net/netmap-fwd/files/netmapfwd.in
#	net/netmap-fwd/files/patch-util.c
#	net/netmap-fwd/pkg-descr
#
echo c - net/netmap-fwd
mkdir -p net/netmap-fwd > /dev/null 2>&1
echo x - net/netmap-fwd/Makefile
sed 's/^X//' >net/netmap-fwd/Makefile << '2ee126d24e56f37f3f4a100f28afe4b4'
X# $FreeBSD: head/net/pimd/Makefile 385640 2015-05-07 17:26:05Z mat $
X
XPORTNAME=	netmap-fwd
XPORTVERSION=	0.2
XCATEGORIES=	net
X
XMAINTAINER=	olivier@FreeBSD.org
XCOMMENT=	IPv4 router over netmap for FreeBSD
X
XLICENSE=	BSD2CLAUSE
X
XLIB_DEPENDS=	libevent.so:devel/libevent2 \
X				libucl.so:textproc/libucl
X
XUSE_GITHUB=	yes
XGH_ACCOUNT=	Netgate
XGH_PROJECT=	${PORTNAME}
XGH_TAGNAME=	6245f9a
XUSE_RC_SUBR=	netmapfwd
X
XPLIST_FILES=	sbin/${PORTNAME} \
X				etc/${PORTNAME}.conf
X
Xdo-install:
X	${INSTALL_PROGRAM} ${WRKSRC}/${PORTNAME} ${STAGEDIR}${PREFIX}/sbin
X	${INSTALL_DATA} ${WRKSRC}/${PORTNAME}.conf ${STAGEDIR}${PREFIX}/etc
X
X.include <bsd.port.mk>
2ee126d24e56f37f3f4a100f28afe4b4
echo x - net/netmap-fwd/distinfo
sed 's/^X//' >net/netmap-fwd/distinfo << '82061fb11c5bfb28e5385fce1907f03b'
XTIMESTAMP = 1484390926
XSHA256 (Netgate-netmap-fwd-0.2-6245f9a_GH0.tar.gz) = 68f372ddaae074885018c6fd08001e7313da9eed95d7530c6a9f0b2d1e1be75f
XSIZE (Netgate-netmap-fwd-0.2-6245f9a_GH0.tar.gz) = 1368183
82061fb11c5bfb28e5385fce1907f03b
echo c - net/netmap-fwd/files
mkdir -p net/netmap-fwd/files > /dev/null 2>&1
echo x - net/netmap-fwd/files/patch-rybsync
sed 's/^X//' >net/netmap-fwd/files/patch-rybsync << 'f99c46c6c70d082e46c9541cfc525e62'
XFrom 4b650575cf22dd3bf1b820e027836a331305c4a9 Mon Sep 17 00:00:00 2001
XFrom: Zollner Robert <wolfit_ro@yahoo.com>
XDate: Sat, 13 Feb 2016 07:49:44 +0200
XSubject: [PATCH 1/6] RIB Integration Proof of concept.
X
XSince the interfaces are still available to the kernel, Quagga can listen and install routes for the interfaces assigned to netmap-fwd
X
XRibsync module will listen for those RIB events and will update it.s internal routing table accordingly
X
XFirst test: create ribsync module, hook into the event system and listen for RIB events
X---
X Makefile     |   4 +-
X netmap-fwd.c |   8 +++
X ribsync.c    | 159 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
X ribsync.h    |   6 +++
X 4 files changed, 175 insertions(+), 2 deletions(-)
X create mode 100644 ribsync.c
X create mode 100644 ribsync.h
X
Xdiff --git Makefile Makefile
Xindex 2520484..7cba961 100644
X--- Makefile
X+++ Makefile
X@@ -1,9 +1,9 @@
X 
X OUT=netmap-fwd
X OBJS=arp.o cleanup.o cli.o config.o ether.o event.o icmp.o if.o inet.o
X-OBJS+=ip.o net.o netmap.o netmap-fwd.o radix.o util.o
X+OBJS+=ip.o net.o netmap.o netmap-fwd.o radix.o util.o ribsync.o
X INCLUDES=arp.h cleanup.h cli.h config.h counters.h ether.h event.h icmp.h
X-INCLUDES+=if.h inet.h ip.h net.h netmap.h radix.h util.h
X+INCLUDES+=if.h inet.h ip.h net.h netmap.h radix.h util.h ribsync.h
X 
X LDFLAGS=-L/usr/local/lib -levent -lutil -lucl
X CCFLAGS=-O2 -fPIC -g -Wall -Wshadow -Wcast-qual -Wcast-align -Wwrite-strings
Xdiff --git netmap-fwd.c netmap-fwd.c
Xindex 0cf53ff..1038934 100644
X--- netmap-fwd.c
X+++ netmap-fwd.c
X@@ -46,6 +46,7 @@
X #include "event.h"
X #include "if.h"
X #include "inet.h"
X+#include "ribsync.h"
X #include "util.h"
X 
X #ifndef PREFIX
X@@ -129,6 +130,7 @@ main(int argc, char **argv)
X 		printf("error: cannot initialize the inet data structures.\n");
X 		exit(1);
X 	}
X+	ribsync_init();
X 
X 	while (argc > 0) {
X 		ifn = argv[0];
X@@ -161,6 +163,12 @@ main(int argc, char **argv)
X 		cleanup();
X 		exit(1);
X 	}
X+    if (ribsync_open() == -1) {
X+        printf("cannot open the kernel PF_ROUTE socket.\n");
X+        cleanup();
X+        exit(1);
X+    }
X+
X 	event_base_dispatch(ev_get_base()); 
X 	cleanup();
X 
Xdiff --git ribsync.c ribsync.c
Xnew file mode 100644
Xindex 0000000..f454051
X--- /dev/null
X+++ ribsync.c
X@@ -0,0 +1,159 @@
X+#include <sys/param.h>
X+#include <sys/socket.h>
X+#include <net/if.h>
X+#include <net/route.h>
X+
X+#include <net/if_dl.h>
X+#include <netinet/in.h>
X+#include <arpa/inet.h>
X+
X+#include <errno.h>
X+#include <stdio.h>
X+#include <stdlib.h>
X+#include <string.h>
X+
X+#include "cleanup.h"
X+#include "cli.h"
X+#include "event.h"
X+#include "inet.h"
X+#include "ribsync.h"
X+
X+union rtsocket_msg {
X+    char buf[1024];
X+    struct rt_msghdr rtm;
X+    struct if_msghdr ifm;
X+    struct ifa_msghdr ifam;
X+    struct if_announcemsghdr ifann;
X+};
X+
X+static int
X+ribsync_cli_stats(struct cli *cli, struct cli_args *args)
X+{
X+    const char *p;
X+
X+    if (1 == args->args) {
X+        p = "RIBSYNC STATISTICS\n";
X+        if (cli_obuf_append(cli, p, strlen(p)) == -1)
X+            return (-1);
X+    }
X+
X+    return (0);
X+}
X+
X+int
X+ribsync_init(void){
X+    /* Register the ribsync cli command. */
X+    cli_cmd_add("ribsync", "ribsync - monitors kernel routing table\n", ribsync_cli_stats, NULL);
X+    
X+    // cleanup_add(ribsync_cleanup, NULL);
X+    return 0;
X+}
X+
X+struct sockaddr_route {
X+    struct sockaddr_in route_dst;
X+    struct sockaddr_in route_mask;
X+    struct sockaddr_in route_gw;
X+    int route_flasgs;
X+};
X+
X+static struct sockaddr_route
X+parse_rt_addr(const union rtsocket_msg *msg_data, size_t len, int addrs_mask, size_t ppos, int rt_flags)
X+{
X+    size_t i=0;
X+    int maskvec[] = {RTA_DST, RTA_GATEWAY, RTA_NETMASK, RTA_GENMASK, RTA_IFP, RTA_IFA, RTA_AUTHOR, RTA_BRD};
X+
X+    struct sockaddr_route rt_addr;
X+    while (ppos < len && i < sizeof(maskvec)/sizeof(maskvec[0])) {
X+        
X+        if (addrs_mask & maskvec[i]) {
X+            const struct sockaddr *sa = (const struct sockaddr *)((const char *)msg_data + ppos);
X+            
X+            if ( maskvec[i] == RTA_DST) {
X+                rt_addr.route_dst = *(const struct sockaddr_in*)sa;
X+                
X+            }else if ( maskvec[i] == RTA_GATEWAY) {
X+                rt_addr.route_gw = *(const struct sockaddr_in*)sa;
X+                
X+            }else if ( maskvec[i] == RTA_NETMASK) {
X+                rt_addr.route_mask = *(const struct sockaddr_in*)sa;
X+            }
X+            
X+            // jump to next socketaddr stuct
X+            ppos += sa->sa_len;
X+        }
X+        i++;
X+    }
X+    
X+    printf("R:%s", inet_ntoa(rt_addr.route_dst.sin_addr));
X+    printf("/%s", inet_ntoa(rt_addr.route_mask.sin_addr));
X+    printf("->%s\n", inet_ntoa(rt_addr.route_gw.sin_addr));
X+        
X+    return rt_addr;
X+}
X+
X+static void
X+ribsync_ev_data(evutil_socket_t socket, short event, void *data) {
X+    
X+    union rtsocket_msg recv_data;
X+    struct sockaddr_route rt_addr;
X+    
X+    recv_data.rtm.rtm_msglen = 4;
X+    
X+    int r1 = recv(socket, &recv_data, sizeof(recv_data), 0);
X+    if (-1 == r1) {
X+        printf("[EE] pf_socket recv error");
X+        return;
X+    }
X+    
X+    if (r1 < 4 || r1 < recv_data.rtm.rtm_msglen) {
X+        printf("SHORT READ (have %d want %hu), SKIPPING.\n", r1, recv_data.rtm.rtm_msglen);
X+        return;
X+    }
X+    
X+    if ( 0 != recv_data.rtm.rtm_errno ) {
X+        printf("Route message contains errors(%d), SKIPPING.\n", recv_data.rtm.rtm_errno);
X+        return;
X+    }
X+    
X+    printf("Received %d bytes. Version %d, Type %#x, Len %d, Err: %d\n", r1,
X+        recv_data.rtm.rtm_version,
X+        recv_data.rtm.rtm_type,
X+        recv_data.rtm.rtm_msglen,
X+        recv_data.rtm.rtm_errno
X+        );
X+
X+    switch (recv_data.rtm.rtm_type) {
X+        case RTM_ADD:
X+            printf("Add route: ");
X+            rt_addr = parse_rt_addr(&recv_data, r1,recv_data.rtm.rtm_addrs, sizeof(struct rt_msghdr), recv_data.rtm.rtm_flags);
X+            break;
X+        case RTM_DELETE:
X+            printf("Remove route: ");
X+            rt_addr = parse_rt_addr(&recv_data, r1,recv_data.rtm.rtm_addrs, sizeof(struct rt_msghdr), recv_data.rtm.rtm_flags);
X+            break;
X+        // case RTM_CHANGE:
X+        // case RTM_NEWADDR:
X+        // case RTM_DELADDR:
X+        // case RTM_IFINFO:
X+        // case RTM_IFANNOUNCE:
X+        }
X+}
X+
X+int ribsync_open(void) {
X+    
X+    int rt_socket = socket(PF_ROUTE, SOCK_RAW, AF_UNSPEC);
X+    if (-1 == rt_socket) {
X+        return -1;
X+    }
X+
X+    fd_set fds;
X+    FD_ZERO(&fds);
X+    FD_SET(rt_socket, &fds);
X+  
X+    // Setup the event for pf_route socket.
X+    struct event *ev;
X+    ev = event_new(ev_get_base(), rt_socket, EV_READ | EV_PERSIST, ribsync_ev_data, NULL);
X+    event_add(ev, NULL);
X+    
X+    return 0;
X+}
X\ No newline at end of file
Xdiff --git ribsync.h ribsync.h
Xnew file mode 100644
Xindex 0000000..65e491d
X--- /dev/null
X+++ ribsync.h
X@@ -0,0 +1,6 @@
X+#ifndef __RIB_SYNC__
X+#define __RIB_SYNC__
X+int ribsync_init(void);
X+int ribsync_open(void);
X+
X+#endif
X\ No newline at end of file
X
XFrom e0da886e98fd45be01c641f1682b4621ab1203b9 Mon Sep 17 00:00:00 2001
XFrom: Zollner Robert <wolfit_ro@yahoo.com>
XDate: Sat, 13 Feb 2016 16:04:49 +0200
XSubject: [PATCH 2/6] Fix sockaddr align when parsing rt_sock data.
X
XThere is some 64bit(long) alignment involved here, have no ideea where it is documented
X
XI have used dnsmasq code: https://github.com/liquidm/dnsmasq/blob/8b285b8cd2e289e532b106a797d540f016eb7ab0/src/bpf.c#L436
X---
X ribsync.c | 13 ++++++++++---
X ribsync.h |  2 +-
X 2 files changed, 11 insertions(+), 4 deletions(-)
X
Xdiff --git ribsync.c ribsync.c
Xindex f454051..bdaa18d 100644
X--- ribsync.c
X+++ ribsync.c
X@@ -78,8 +78,15 @@ parse_rt_addr(const union rtsocket_msg *msg_data, size_t len, int addrs_mask, si
X                 rt_addr.route_mask = *(const struct sockaddr_in*)sa;
X             }
X             
X-            // jump to next socketaddr stuct
X-            ppos += sa->sa_len;
X+            // jump to next socketaddr struct
X+            size_t diff = sa->sa_len;
X+            if (!diff) {
X+                diff = sizeof(long);
X+            }
X+            ppos += diff;
X+            if (diff & (sizeof(long) - 1)) {
X+                ppos += sizeof(long) - (diff & (sizeof(long) - 1));
X+            }
X         }
X         i++;
X     }
X@@ -156,4 +163,4 @@ int ribsync_open(void) {
X     event_add(ev, NULL);
X     
X     return 0;
X-}
X\ No newline at end of file
X+}
Xdiff --git ribsync.h ribsync.h
Xindex 65e491d..2354700 100644
X--- ribsync.h
X+++ ribsync.h
X@@ -3,4 +3,4 @@
X int ribsync_init(void);
X int ribsync_open(void);
X 
X-#endif
X\ No newline at end of file
X+#endif
X
XFrom f69b6bb8c86eac3383b153924ca0290c7cc01d81 Mon Sep 17 00:00:00 2001
XFrom: Zollner Robert <wolfit_ro@yahoo.com>
XDate: Sat, 13 Feb 2016 18:36:40 +0200
XSubject: [PATCH 3/6] Added two public route add/del functions to the inet
X module.
X
XCould not use existing route(add/del) functions because I would have to expose internal state outside of inet module and I don't want to do that.
X
XI basically used inet_cli_route_(add/del) and took out the cli parsing stuff.
X---
X inet.c    | 95 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
X inet.h    |  3 ++
X ribsync.c | 36 +++++++++++++++++++-----
X 3 files changed, 127 insertions(+), 7 deletions(-)
X
Xdiff --git inet.c inet.c
Xindex 99b3d88..4c0bc24 100644
X--- inet.c
X+++ inet.c
X@@ -680,3 +680,98 @@ inet_cli_route(struct cli *cli, struct cli_args *args)
X 
X 	return (err);
X }
X+
X+/*
X+ * Calculate prefix length of a netmask passed as a sockaddr ipv4 structure
X+ */
X+static int
X+calc_masklen_ipv4(struct sockaddr_in *addr)
X+{
X+    int prefixLength = 0;
X+    uint32_t m = ntohl( *(uint32_t*) &addr->sin_addr);
X+    while (m & 0x80000000) {
X+        prefixLength++;
X+        m = m << 1;
X+    }
X+
X+    if(prefixLength == 0) {
X+        // This is a /32 - host
X+        return 32;
X+    }
X+    return prefixLength;
X+}
X+
X+int
X+inet_route_add_ipv4(
X+    struct sockaddr_in addr_net,
X+    struct sockaddr_in addr_mask,
X+    struct sockaddr_in addr_gw,
X+    int flags)
X+{
X+    struct inet *inet;
X+    inet = &g_inet;
X+    struct inet_rtentry *rt;
X+    struct radix_node *rn;
X+
X+    if (calc_masklen_ipv4(&addr_mask) < 32) {
X+        addr_net.sin_addr.s_addr &= addr_mask.sin_addr.s_addr;
X+    }
X+
X+    rn = inet->rnh->rnh_matchaddr( &addr_gw, inet->rnh);
X+    if (rn == NULL || (rn->rn_flags & RNF_ROOT) != 0) {
X+        if(rn == NULL) {
X+            printf("\n[DBG]-add- rn is null\n");
X+        }
X+        printf("\n[WARN]-add- Network is unreachable\n");
X+        return -1;
X+    }
X+
X+    rt = (struct inet_rtentry *)rn;
X+    if (inet_addroute(&addr_net, &addr_gw, &addr_mask, flags, rt->nmif) != 0) {
X+        printf ("\n[WARN]-add- Cannot add route..(allready in table?)\n");
X+        return -1;
X+    }
X+    printf("\t -OK-\n");
X+    return 0;
X+}
X+
X+int
X+inet_route_del_ipv4(
X+    struct sockaddr_in addr_net,
X+    struct sockaddr_in addr_mask,
X+    struct sockaddr_in addr_gw, int flags)
X+{
X+
X+    struct inet *inet;
X+    inet = &g_inet;
X+    struct inet_rtentry *rt;
X+    struct radix_node *rn;
X+
X+    if ( calc_masklen_ipv4(&addr_mask) < 32) {
X+        addr_net.sin_addr.s_addr &= addr_mask.sin_addr.s_addr;
X+    }
X+
X+    rn = inet->rnh->rnh_lookup(&addr_net, &addr_mask, inet->rnh);
X+    if (rn == NULL || (rn->rn_flags & RNF_ROOT) != 0){
X+        printf( "\n[WARN]-del- Route has not been found\n");
X+        return -1;
X+    }
X+
X+    rt = (struct inet_rtentry *)rn;
X+    /* Check if the gateway address matches. */
X+    if ( rt->gw.sin_addr.s_addr != addr_gw.sin_addr.s_addr) {
X+        printf( "\n[WARN]-del- Route has not been found (gw not match)\n\n");
X+        return -1;
X+    }
X+
X+    rn = inet->rnh->rnh_deladdr(&addr_net, &addr_mask, inet->rnh);
X+    if (rn == NULL) {
X+        printf( "\n[WARN]-del- Route could not be deleted\n");
X+        return -1;
X+    }
X+
X+    rt = (struct inet_rtentry *)rn;
X+    free(rt);
X+    printf("\t -OK-\n");
X+    return 0;
X+}
Xdiff --git inet.h inet.h
Xindex 3826bca..42704a7 100644
X--- inet.h
X+++ inet.h
X@@ -66,3 +66,6 @@ void inet_addr_if_free(struct nm_if *);
X struct inet_addr *inet_get_if_addr(struct nm_if *);
X struct inet_addr *inet_our_addr(struct in_addr *);
X struct inet_addr *inet_our_broadcast(struct in_addr *);
X+
X+int inet_route_add_ipv4( struct sockaddr_in, struct sockaddr_in, struct sockaddr_in, int);
X+int inet_route_del_ipv4( struct sockaddr_in, struct sockaddr_in, struct sockaddr_in, int);
Xdiff --git ribsync.c ribsync.c
Xindex bdaa18d..0d22f78 100644
X--- ribsync.c
X+++ ribsync.c
X@@ -49,6 +49,13 @@ ribsync_init(void){
X     return 0;
X }
X 
X+void
X+dump_sockaddr_in(struct sockaddr_in *addr)
X+{
X+    printf("  sin_family: %d \n",addr->sin_family);
X+    printf("  sin_addr: %s\n",inet_ntoa(addr->sin_addr));
X+}
X+
X struct sockaddr_route {
X     struct sockaddr_in route_dst;
X     struct sockaddr_in route_mask;
X@@ -91,9 +98,9 @@ parse_rt_addr(const union rtsocket_msg *msg_data, size_t len, int addrs_mask, si
X         i++;
X     }
X     
X-    printf("R:%s", inet_ntoa(rt_addr.route_dst.sin_addr));
X+    printf("%s", inet_ntoa(rt_addr.route_dst.sin_addr));
X     printf("/%s", inet_ntoa(rt_addr.route_mask.sin_addr));
X-    printf("->%s\n", inet_ntoa(rt_addr.route_gw.sin_addr));
X+    printf(" -> %s", inet_ntoa(rt_addr.route_gw.sin_addr));
X         
X     return rt_addr;
X }
X@@ -122,21 +129,24 @@ ribsync_ev_data(evutil_socket_t socket, short event, void *data) {
X         return;
X     }
X     
X-    printf("Received %d bytes. Version %d, Type %#x, Len %d, Err: %d\n", r1,
X+    /*printf("Received %d bytes. Version %d, Type %#x, Len %d\n", r1,
X         recv_data.rtm.rtm_version,
X         recv_data.rtm.rtm_type,
X-        recv_data.rtm.rtm_msglen,
X-        recv_data.rtm.rtm_errno
X-        );
X+        recv_data.rtm.rtm_msglen
X+    );*/
X 
X+    int rt_status=0;
X     switch (recv_data.rtm.rtm_type) {
X         case RTM_ADD:
X             printf("Add route: ");
X             rt_addr = parse_rt_addr(&recv_data, r1,recv_data.rtm.rtm_addrs, sizeof(struct rt_msghdr), recv_data.rtm.rtm_flags);
X+            rt_status = inet_route_add_ipv4(rt_addr.route_dst, rt_addr.route_mask, rt_addr.route_gw, recv_data.rtm.rtm_flags);
X             break;
X         case RTM_DELETE:
X-            printf("Remove route: ");
X+            printf("Del route: ");
X             rt_addr = parse_rt_addr(&recv_data, r1,recv_data.rtm.rtm_addrs, sizeof(struct rt_msghdr), recv_data.rtm.rtm_flags);
X+            rt_status = inet_route_del_ipv4(rt_addr.route_dst, rt_addr.route_mask, rt_addr.route_gw, recv_data.rtm.rtm_flags);
X+            
X             break;
X         // case RTM_CHANGE:
X         // case RTM_NEWADDR:
X@@ -144,6 +154,18 @@ ribsync_ev_data(evutil_socket_t socket, short event, void *data) {
X         // case RTM_IFINFO:
X         // case RTM_IFANNOUNCE:
X         }
X+    if( -1 == rt_status) {
X+        printf("[DBG] Route dst\n");
X+        dump_sockaddr_in(&rt_addr.route_dst);
X+
X+        printf("[DBG] Route netmask\n");
X+        dump_sockaddr_in(&rt_addr.route_mask);
X+
X+        printf("[DBG] Route gateway\n");
X+        dump_sockaddr_in(&rt_addr.route_gw);
X+        printf("\n");
X+    }
X+    fflush(stdout);
X }
X 
X int ribsync_open(void) {
X
XFrom 73b9e56d9cce0eb39f5460caf2d2c71a5a5e0123 Mon Sep 17 00:00:00 2001
XFrom: Zollner Robert <wolfit_ro@yahoo.com>
XDate: Sat, 13 Feb 2016 19:04:51 +0200
XSubject: [PATCH 4/6] Increase cli buffer sizes so it can print full bgp table
X
XThis will increase mem usage (~200mb) so this should be just a temp. workaround
X---
X cli.c  | 2 +-
X util.c | 4 +++-
X 2 files changed, 4 insertions(+), 2 deletions(-)
X
Xdiff --git cli.c cli.c
Xindex c8d4553..b258a47 100644
X--- cli.c
X+++ cli.c
X@@ -48,7 +48,7 @@
X #include "util.h"
X 
X #define	CMDMAXSZ		64
X-#define	MAXCLIBUF		4096
X+#define	MAXCLIBUF		16777216
X 
X /* CLI client data. */
X struct cli {
Xdiff --git util.c util.c
Xindex 68c54f2..5bde2c6 100644
X--- util.c
X+++ util.c
X@@ -37,7 +37,9 @@
X 
X #include "util.h"
X 
X-#define	MAXBUFSZ	(BUFSZ * 1024)
X+// default was 256 * 1024 which is enough fo 70 routes
X+// 256 * 131072 should be enough for more than ~1.1 mil
X+#define	MAXBUFSZ	(BUFSZ * 131072)
X 
X int
X dprintf(const char *fmt, ...)
X
XFrom 67fc85c119a3099ca20bd6540967f461781a8d59 Mon Sep 17 00:00:00 2001
XFrom: Zollner Robert <wolfit_ro@yahoo.com>
XDate: Sat, 13 Feb 2016 19:07:26 +0200
XSubject: [PATCH 5/6] resid could be greather than MAXCLIBUF, so we should
X handle that also
X
X---
X cli.c | 2 +-
X 1 file changed, 1 insertion(+), 1 deletion(-)
X
Xdiff --git cli.c cli.c
Xindex b258a47..6f7859f 100644
X--- cli.c
X+++ cli.c
X@@ -500,7 +500,7 @@ cli_ev_read(struct cli *cli)
X 	int more;
X 	ssize_t i, len;
X 
X-	if (cli->resid == MAXCLIBUF) {
X+	if (cli->resid >= MAXCLIBUF) {
X 		DPRINTF(
X 		    "dropping cli connection - unsupported cli command (%d)\n",
X 		    cli->fd);
X
XFrom e2b3f9f6b1d8311ef4293b0ed276250f71c61c64 Mon Sep 17 00:00:00 2001
XFrom: Zollner Robert <wolfit_ro@yahoo.com>
XDate: Sat, 13 Feb 2016 19:34:02 +0200
XSubject: [PATCH 6/6] Some style formatting to be more in line with the project
X
X---
X ribsync.c | 17 +++++++++--------
X 1 file changed, 9 insertions(+), 8 deletions(-)
X
Xdiff --git ribsync.c ribsync.c
Xindex 0d22f78..7462471 100644
X--- ribsync.c
X+++ ribsync.c
X@@ -41,7 +41,8 @@ ribsync_cli_stats(struct cli *cli, struct cli_args *args)
X }
X 
X int
X-ribsync_init(void){
X+ribsync_init(void)
X+{
X     /* Register the ribsync cli command. */
X     cli_cmd_add("ribsync", "ribsync - monitors kernel routing table\n", ribsync_cli_stats, NULL);
X     
X@@ -64,7 +65,7 @@ struct sockaddr_route {
X };
X 
X static struct sockaddr_route
X-parse_rt_addr(const union rtsocket_msg *msg_data, size_t len, int addrs_mask, size_t ppos, int rt_flags)
X+parse_rt_addr(const union rtsocket_msg *msg_data, size_t len, int addrs_mask, size_t ppos)
X {
X     size_t i=0;
X     int maskvec[] = {RTA_DST, RTA_GATEWAY, RTA_NETMASK, RTA_GENMASK, RTA_IFP, RTA_IFA, RTA_AUTHOR, RTA_BRD};
X@@ -106,8 +107,8 @@ parse_rt_addr(const union rtsocket_msg *msg_data, size_t len, int addrs_mask, si
X }
X 
X static void
X-ribsync_ev_data(evutil_socket_t socket, short event, void *data) {
X-    
X+ribsync_ev_data(evutil_socket_t socket, short event, void *data)
X+{
X     union rtsocket_msg recv_data;
X     struct sockaddr_route rt_addr;
X     
X@@ -139,12 +140,12 @@ ribsync_ev_data(evutil_socket_t socket, short event, void *data) {
X     switch (recv_data.rtm.rtm_type) {
X         case RTM_ADD:
X             printf("Add route: ");
X-            rt_addr = parse_rt_addr(&recv_data, r1,recv_data.rtm.rtm_addrs, sizeof(struct rt_msghdr), recv_data.rtm.rtm_flags);
X+            rt_addr = parse_rt_addr(&recv_data, r1,recv_data.rtm.rtm_addrs, sizeof(struct rt_msghdr));
X             rt_status = inet_route_add_ipv4(rt_addr.route_dst, rt_addr.route_mask, rt_addr.route_gw, recv_data.rtm.rtm_flags);
X             break;
X         case RTM_DELETE:
X             printf("Del route: ");
X-            rt_addr = parse_rt_addr(&recv_data, r1,recv_data.rtm.rtm_addrs, sizeof(struct rt_msghdr), recv_data.rtm.rtm_flags);
X+            rt_addr = parse_rt_addr(&recv_data, r1,recv_data.rtm.rtm_addrs, sizeof(struct rt_msghdr));
X             rt_status = inet_route_del_ipv4(rt_addr.route_dst, rt_addr.route_mask, rt_addr.route_gw, recv_data.rtm.rtm_flags);
X             
X             break;
X@@ -168,8 +169,8 @@ ribsync_ev_data(evutil_socket_t socket, short event, void *data) {
X     fflush(stdout);
X }
X 
X-int ribsync_open(void) {
X-    
X+int ribsync_open(void)
X+{
X     int rt_socket = socket(PF_ROUTE, SOCK_RAW, AF_UNSPEC);
X     if (-1 == rt_socket) {
X         return -1;
f99c46c6c70d082e46c9541cfc525e62
echo x - net/netmap-fwd/files/patch-util.h
sed 's/^X//' >net/netmap-fwd/files/patch-util.h << '69b7616cf00a3bb1e75261dbd0245ad6'
X--- util.h.orig	2017-01-15 08:26:49 UTC
X+++ util.h
X@@ -26,11 +26,11 @@
X  */
X 
X #define	BUFSZ		256
X-#define	DPRINTF(_fmt, args...)		if (verbose) dprintf(_fmt, ## args)
X+#define	DPRINTF(_fmt, args...)		if (verbose) ddprintf(_fmt, ## args)
X 
X extern int verbose;
X 
X-int dprintf(const char *, ...);
X+int ddprintf(const char *, ...);
X int printf_buf(char **, int *, int *, const char *, ...);
X void printb(char **, int *, int *, const char *, unsigned, const char *);
X int pidfile_create(const char *);
69b7616cf00a3bb1e75261dbd0245ad6
echo x - net/netmap-fwd/files/netmapfwd.in
sed 's/^X//' >net/netmap-fwd/files/netmapfwd.in << '0c4ad096a4c2f3341f116edbd68d2d53'
X#!/bin/sh
X#
X# PROVIDE: netmapfwd
X# REQUIRE: DAEMON
X#
X# Add the following line to /etc/rc.conf to enable netmap-fwd:
X#
X# netmapfwd_enable="YES"
X# netmapfwd_ifaces="<if1> <if2>..."
X#
X
X. /etc/rc.subr
X
Xname=netmapfwd
Xrcvar=netmapfwd_enable
X
X# read configuration
Xload_rc_config ${name}
X
X# Default values
Xnetmapfwd_enable=${netmapfwd_enable:-"NO"}
Xnetmapfwd_ifaces=${netmapfwd_ifaces:-}          # netmap compliant ethernet interface(s)
X
Xnetmapfwd_precmd ()
X{
X	if [ -z "${netmapfwd_ifaces}" ]; then
X                warn "if name (netmapfwd_ifaces) not configured"
X                return 1
X	fi
X
X 	ifaces=
X	for iface in ${netmapfwd_ifaces}; do
X            ifaces="${ifaces} ${iface}"
X	done
X
X	rc_flags="${rc_flags} ${ifaces}"
X}
X
Xnetmapfwd_start ()
X{
X	/usr/sbin/daemon ${command} ${rc_flags}
X}
X
Xpidfile=/var/run/netmap-fwd.pid
Xcommand="%%PREFIX%%/sbin/netmap-fwd"
Xrequired_files="%%PREFIX%%/etc/netmap-fwd.conf"
Xstart_precmd=${name}_precmd
Xstart_cmd="netmapfwd_start"
X
Xrun_rc_command "$1"
0c4ad096a4c2f3341f116edbd68d2d53
echo x - net/netmap-fwd/files/patch-util.c
sed 's/^X//' >net/netmap-fwd/files/patch-util.c << 'debcb07a812258deef170214adc4d395'
X--- util.c.orig	2017-01-15 08:26:45 UTC
X+++ util.c
X@@ -40,7 +40,7 @@
X #define	MAXBUFSZ	(BUFSZ * 1024)
X 
X int
X-dprintf(const char *fmt, ...)
X+ddprintf(const char *fmt, ...)
X {
X 	char tmp[MAXBUFSZ];
X 	int expired, len;
debcb07a812258deef170214adc4d395
echo x - net/netmap-fwd/pkg-descr
sed 's/^X//' >net/netmap-fwd/pkg-descr << 'ab5b7cf3f6fc92739f384c42c931e0eb'
XAn IPv4 router over netmap for FreeBSD
X
XWWW: https://github.com/NetgateUSA/netmap-fwd
ab5b7cf3f6fc92739f384c42c931e0eb
exit

