#!/bin/sh
# Bind Chelsio interrupt threads to different cores (melifaro@FreeBSD.org)
# Only usefull with 8 core or less, and you want to exclude some core
# Used with default value (no core excluded) didn't improve performance

# PROVIDE:      chelsio-cpu-bind
# REQUIRE:      FILESYSTEMS netif
# KEYWORD:      nojail

#
# Add the following lines to /etc/rc.conf.local or /etc/rc.conf
# to enable this service:
#
# chelsiobind_enable (bool):   Set to YES by default.
#               Set it to YES to bind interrupt threads to different cores
# chelsiobind_avoidncpu (int):  0 by default.
#		Set to number of CPU to exclude from binding

. /etc/rc.subr

name="chelsiobind"
rcvar=${name}_enable

start_cmd="chelsiobind_start"

chelsiobind_start()
{
	# Need a Chelsio NIC
        NQ=`/sbin/sysctl -ni dev.cxl.0.nrxq`
        if [ -z "${NQ}" ]; then
                exit 0;
        fi

	# Work with 2 CPU minimum
        NCPU=`/sbin/sysctl -n hw.ncpu`
        if [ ${NCPU} -le 2 ]; then
                exit 0
        fi

	# Exclude some CPU from binding
        NCPU=$((NCPU - $chelsiobind_avoidncpu))
        CPU=0
	cxl=$(sysctl dev.cxl. | grep -c nrxq)
	for i in $(seq 1 ${cxl}); do
        	for IRQ in `/usr/bin/vmstat -ai |\
            		/usr/bin/sed -nE "/t5nex0:${i}a/s/irq([[:digit:]]+):.*/\1/p"`; do
			/bin/echo "Bind t5nex0:${i}a IRQ ${IRQ} to CPU ${CPU}"
                	/usr/bin/cpuset -l ${CPU} -x ${IRQ}
                	CPU=$(((CPU + 1) % NCPU))
        	done
       	CPU=0
	done
}

load_rc_config $name

: ${chelsiobind_enable="NO"}
: ${chelsiobind_avoidncpu=0}

run_rc_command "$1"

