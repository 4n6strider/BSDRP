#!/bin/sh
#
# Tool for measuring "equilibrium throughput" of a device
#
# BSD Router Project
# http://bsdrp.net
# Method based on this paper:
#  Methodology for Benchmarking IPsec Gateways
#  http://www.mecs-press.org/ijcnis/ijcnis-v4-n9/IJCNIS-V4-N9-1.pdf
#  From Adam Tisovsky,Ivan Baronak
#  Department of Telecommunications, Slovak University of Technology

# Original paper used iperf in UDP mode, but this script uses netmap's pkt-gen
# and was improved for adding "paquet-per-second" mode usable for benching
# router

set -eu

#### (default) Variables 
# tolerance in %
TOLERANCE=0.01
# output file for iperf and pkt-gen
OFILE=/tmp/equilibrium-rx.txt
CFILE=/tmp/equilibrium-tx.txt
FWFILE=/tmp/equilibrium.fwrate
# Packet LOAD in Bytes
PLOAD=""
# Maximum link-rate value (Mb/s or fps)
LINK_RATE=""
FWRATE=""
MAX_FWRATE=0
TREND=""
PEAK=false
PSIZE=""
FSIZE=""
DEST=""
TX_NIC=""
RX_NIC=""
PPS_MODE=false
UNIT="Mb/s"
SOFT_UDP_CHK=false

### Functions
# A usefull function (from: http://code.google.com/p/sh-die/)
die() { echo -n "EXIT: " >&2; echo "$@" >&2; exit 1; }

usage () {
	echo "Usage: $0 -d MAC-DEST -t TX-NIC -r RX-NIC [-l LINK-BIT-RATE -p -o TOLERANCE -s UDP-LOAD-SIZE]"
	echo " -d MAC :      Destination MAC of the Device Under Test (DUT)"
	echo " -h :          Display this usage message"
	echo " -l RATE :     Maximum link bit-rate in Mbit/s."
	echo "                  100 for a 100Mb/s link"
	echo "                 1000 for a 1Gb/s link (default)"
	echo "                10000 for a 10Gb/s link"
	echo "                If option -p, this value is in Kilo packet-per-second"
	echo "                Maximum link packet rate in Kpps (1 frame = 1 packet)"
	echo "                  148 for a 100Mb/s link"
	echo "                 1488 for a Gigabit link (default if -p)"
	echo "                14880 for a 10Gb/s link"
	echo " -p :          Switch into Packet-per-second mode"
	echo "                Input and displayed values unit change from Mb/s to Kpps"
	echo "                Use this option for benching router in place of IPSec gateway"
	echo " -o TOLERANCE: Measure tolerance in %"
	echo "                default value of 0.01 for 0.1%"
	echo " -t TX-NIC :   NIC used for sending load"
	echo " -r RX-NIC :   NIC used for receiving (and measuring) load"
	echo " -s LOAD  :    Size of the UDP load"
	echo "                default: 500 in Mb/s, 18 in pps mode"
	echo "                Minimum load for Ethernet: 18"
	echo " -u :          Enable software UDP checksum on pkt-gen"
	echo "Example: $0 -d 00:1b:21:d3:8f:3e -t igb2 -r igb3"
    echo "IP subnet used as source: 198.18.10.0/24"
    echo "IP subnet used as destination: 198.19.10.0/24"
	exit 1
}

extract () {
    # Extract the median value from a raw output of pkt-gen in receiver mode
    # $1 : Input file
    local LINES=`wc -l $1`
    LINES=`echo ${LINES} | cut -d ' ' -f1`
    # Remove the first 12 lines (garbage or not good result) and the 5 last lines (bad result too)
    # head -n `expr ${LINES} - 10` $1 | tail -n `expr ${LINES} - 10 - 15` > /tmp/equilibrium.clean
	head -n `expr ${LINES} - 5` $1 | tail -n `expr ${LINES} - 5 - 12` > /tmp/equilibrium.clean
    # Filter the output (still filtering "0 pps" lines in case of) and kept only the numbers:
    # example of good line:
    # 290.703575 main_thread [1441] 729113 pps (730571 pkts in 1002000 usec)
    grep -E 'main_thread[[:space:]]\[[[:digit:]]+\][[:space:]][1-9].*pps' /tmp/equilibrium.clean | cut -d ' ' -f 4 > /tmp/equilibrium.ministat.data
    #Now we calculate the maximum value of this run with ministat
	[ -s /tmp/equilibrium.ministat.data ] || die "No packet received, check your configurations"
	echo `ministat -n /tmp/equilibrium.ministat.data | tail -n -1 | tr -s ' ' | cut -d ' ' -f 4` > ${FWFILE}
	PPS_FWRATE=`cat ${FWFILE}`
	if (${PPS_MODE}); then
		# Need to convert the pps value into Kpps
		echo "$(( ${PPS_FWRATE} / 1000 ))" > ${FWFILE}
	else
		# Need to convert the PPS value into a Mb/s value
		echo "$(( ${PPS_FWRATE} * 8 * ${FSIZE} / 1000000 ))" > ${FWFILE}
	fi
    rm /tmp/equilibrium.clean /tmp/equilibrium.ministat.data || die "ERROR: can't delete clean.X.data"
	return 0
}

load () {
	# Start load process
	# 
	[ -f ${OFILE} ] && rm ${OFILE}
	[ -f ${CFILE} ] && rm ${CFILE}
	# We are using pkt-gen, and its base value is pps, need some conversion
	if (${PPS_MODE}); then
		PPS=$(( ${OLOAD} * 1000 ))
	else
		# PPS-RATE = bandwitdh-in-bps / PSIZE-in-Byte / 8
		PPS=$(( ${OLOAD} * 1000000 / ${FSIZE} / 8))
	fi
	# bench should running during 30 seconds minimum
	PPS_TO_SENT=$(( ${PPS} * 30 ))
	# Start a receiver
	pkt-gen -f rx -i ${RX_NIC} > ${OFILE} 2>&1 &
	# Start a generator
	if (${SOFT_UDP_CHK}); then
		CHK="-U"
	else
		CHK=""
		ifconfig ${TX_NIC} down
		ifconfig ${TX_NIC} txcsum
		ifconfig ${TX_NIC} up
	fi
	CMD="pkt-gen ${CHK} -f tx -i ${TX_NIC} -l ${FSIZE} -R ${PPS} -n ${PPS_TO_SENT} \
	-d 198.19.10.1:2000-198.19.10.100 -D ${DEST} -s 198.18.10.1:2000-198.18.10.20"
	echo $CMD > ${CFILE}
	${CMD} >> ${CFILE} 2>&1
	# Now close the receiver
	pkill pkt-gen || die "can't close the receiver???"
	# Check than generator correctly generate PPS value
	extract ${CFILE} || die "Can't extract the maximum value from ${CFILE}"
	CHECK=`cat ${FWFILE}`
	[ ${CHECK} -lt ${OLOAD} ] && echo "  - Warning: Generated only ${CHECK}${UNIT} in place of ${OLOAD}${UNIT}"
	# Then extract a uniq value
	extract ${OFILE} || die "Can't extract the maximum value from ${OFILE}"
	return 0
}

#### Main

args=`getopt d:hl:po:r:s:t:u $*`

set -- $args
for i
do
    case "$i" in
        -d)
            DEST=$2
			shift
            shift
			;;
		-h)
			usage
			;;
        -l)
            LINK_RATE=$2
            shift
            shift
            ;;
		-p)
			PPS_MODE=true
			shift
			;;
		-o)
			TOLERANCE=$2
			shift
			shift
			;;	
        -t)
			TX_NIC=$2
			shift
			shift
			;;
		-r)
			RX_NIC=$2
			shift
			shift
			;;
		-s)
			PLOAD=$2
			shift
			shift
			;;
		-u)
			SOFT_UDP_CHK=true
			shift
			;;
		--)
            shift
            break
	esac
done

# Check for mandatory value
if [ -z "${DEST}" ]; then
	echo "Missing Destination MAC"
	usage
fi
if [ -z "${TX_NIC}" ]; then
	echo "Missing TX NIC"
	usage
fi
if [ -z "${RX_NIC}" ]; then
	echo "Missing RX NIC"
	usage
fi

# Set the default value corresponding to differents mode
if [ -z ${PLOAD} ]; then
	(${PPS_MODE}) && PLOAD=18 || PLOAD=500
fi

if [ -z ${LINK_RATE} ]; then
	(${PPS_MODE}) && LINK_RATE=1488	|| LINK_RATE=1000
fi

# Packet LOAD in Bytes
PSIZE=$((${PLOAD} + 28))
# Frame size (excluding CRC)
FSIZE=$((${PLOAD} + 42))

(${PPS_MODE}) && UNIT="Kpps"

# Initial offered load value, should be set to 50% of the link bit-rate
OLOAD=$(( ${LINK_RATE} / 2 ))
# step (in Mbit) should be 25% of the link bit-rate
STEP=$(( ${LINK_RATE} / 4 ))

echo "Benchmark tool using equilibrium throughput method"
(${PPS_MODE}) && echo "- Mode: Router benchmark" || echo "- Mode: IPSec gateway benchmark"
echo "- UDP load = ${PLOAD}B, IP packet size=${PSIZE}B, Ethernet frame size=${FSIZE}B"
echo "- Link rate = ${LINK_RATE} ${UNIT}"
echo "- TOLERANCE = ${TOLERANCE}"
echo -n "- Software netmap UDP checksum = "
(${SOFT_UDP_CHK}) && echo "on" || echo "off"
for i in `seq 1 16`;do
	echo "Iteration $i"
	echo "  - offering load = ${OLOAD} ${UNIT}"
	echo "  - STEP = ${STEP} ${UNIT}"
	[ -n "${TREND}" ] && echo "  - TREND = ${TREND}"
	load || die "Can't run bench test"
	FWRATE=`cat /tmp/equilibrium.fwrate`
	echo "  - Measured forwarding rate = ${FWRATE} ${UNIT}"
	if [ ${FWRATE} -gt ${OLOAD} ]; then
		echo "  - forwarding rate greater than offering load! (forcing FWRATE=OLOAD)"
		FWRATE=${OLOAD}
	fi
	[ ${FWRATE} -lt 1 ] && die "FWRATE lower than 1 ${UNIT}, can't continue"
	[ ${FWRATE} -gt ${MAX_FWRATE} ] && MAX_FWRATE=${FWRATE}
	# receiving load can't be greater than offered load, but rouding value can create this problem
	# This is why the next test is a -ge in place of -eq
	if [ ${FWRATE} -ge ${OLOAD} ]; then
		[ "${TREND}" = "decreasing" ] && PEAK=true
		(${PEAK}) && STEP=$(( ${STEP} / 2 ))
		OLOAD=$(( ${OLOAD} + ${STEP} ))
		TREND="increasing"
	else
		[ "${TREND}" = "increasing" ] && PEAK=true
		(${PEAK}) && STEP=$(( ${STEP} / 2 ))
		OLOAD=$((${OLOAD} - ${STEP}))
		# If the initial LOAD is too big and result of first FWRATE already lower than STEP,
		#  the second iteration will set OLOAD to 0
		#  Try to fix this behavior by setting OLOAD=FWRATE if FWRATE < STEP
		if [ -z "${TREND}" ]; then
			if [ ${FWRATE} -lt ${STEP} ]; then
				echo "  - Forwared rate too low, forcing OLOAD=FWRATE and STEP=FWRATE/2"
				STEP=$(( ${FWRATE} / 2 ))
				OLOAD=${FWRATE}
			fi
		fi
		TREND="decreasing"
	fi
	[ ${OLOAD} -eq 0 ] && die "Offered load reached 0 ${UNIT} (Too much packets dropped/corrupted?), can't continue"
	FLOAT=`echo ${OLOAD} \* ${TOLERANCE} | bc`
	ROUND=`echo "($FLOAT+0.5)/1" | bc `
	if [ ${STEP} -le ${ROUND} ]; then
		break
	fi
done
echo "Estimated Equilibrium link throughput= ${FWRATE} ${UNIT} (maximum value seen: ${MAX_FWRATE} ${UNIT})"
