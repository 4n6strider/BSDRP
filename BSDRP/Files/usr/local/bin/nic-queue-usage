#!/usr/bin/env python
#Melifaro's script for displaying NIC queue usage/rate

from __future__ import division
import re
import sys
import subprocess
import time

if len(sys.argv) < 2:
    print("Usage: {} cxl|ix|igb|bxe0".format(sys.argv[0]))
    sys.exit(1)

def read_nic(name):
    m = re.match('^(ix|cxl|igb|bxe)(\d+)$', name)
    if not m:
        raise Exception('Invalid nic name: {}'.format(name))
    driver=m.group(1)
    rxq = {}
    txq = {}
    agg = {}
    for line in subprocess.check_output("/sbin/sysctl dev.{}.{}".format(m.group(1), m.group(2)).split(), universal_newlines=True).split("\n"):
        # dev.cxl.0.rxq.1.rxcsum
        # dev.cxl.0.txq.1.r_enqueues: 359615473
        # dev.cxl.0.stats.rx_frames
        # dev.ix.0.queue0.rx_packets: 45256216
        # dev.ix.0.queue0.tx_packets: 5
        # dev.ix.0.total_pkts_rcvd
        # dev.ix.0.total_pkts_txd
        # dev.igb.1.mac_stats.total_pkts_recvd
        # dev.igb.1.mac_stats.total_pkts_txd
        # dev.bxe.3.queue.0.rx_pkts
        # dev.bxe.3.queue.0.tx_pkts
        # dev.bxe.3.rx_bcast_packets: 1447
        # dev.bxe.3.rx_mcast_packets: 0
        # dev.bxe.3.rx_ucast_packets: 1524243

        items = line.split(":")
        #print("L: {}".format(line))
        if driver == "bxe":
            m = re.match('.*\.queue.(\d+)\.tx_pkts:\s+(\d+)', line)
        elif driver == "cxl":
            m = re.match('.*\.txq\.(\d+)\.r_enqueues:\s+(\d+)', line)
        elif driver in ("ix", "igb"):
            m = re.match('.*\.queue(\d+)\.tx_packets:\s+(\d+)', line)
        if m:
            txq[m.group(1)] = int(m.group(2))
            #print("TXQ {} value {}".format(m.group(1), m.group(2)))
        if driver == "bxe":
            m = re.match('.*\.queue.(\d+)\.rx_pkts:\s+(\d+)', line)
        elif driver == "cxl":
            m = re.match('.*\.rxq\.(\d+)\.rxcsum:\s+(\d+)', line)
        elif driver in ("ix", "igb"):
            m = re.match('.*\.queue(\d+)\.rx_packets:\s+(\d+)', line)
        if m:
            rxq[m.group(1)] = int(m.group(2))
            #print("RXQ {} value {}".format(m.group(1), m.group(2)))
        if driver == "bxe":
           #To do: aggregate bcast/mcast and ucast
           m = re.match('.*\.rx_ucast_packets:\s+(\d+)', line)
        elif driver == "cxl":
            m = re.match('.*\.stats.rx_frames:\s+(\d+)', line)
        elif driver == "igb":
            m = re.match('.*\.total_pkts_recvd:\s+(\d+)', line)
        elif driver == "ix":
            m = re.match('.*\.total_pkts_rcvd:\s+(\d+)', line)
        if m:
            agg['rx_sum'] = int(m.group(1))
        if driver == "bxe":
            #To do: aggregate bcast/mcast and ucast
            m = re.match('.*\.tx_ucast_packets:\s+(\d+)', line)
        if driver in ("ix", "igb"):
            m = re.match('.*\.total_pkts_txd:\s+(\d+)', line)
        elif driver == "cxl":
            m = re.match('.*\.stats.tx_frames:\s+(\d+)', line)
        if m:
            agg['tx_sum'] = int(m.group(1))
    return [rxq, txq, agg]

def make_diff(old_ret, new_ret):
    res = []
    rxq = {}
    txq = {}
    agg = {}
    for i in old_ret[0]:
        #print("Check {} {} vs {}".format(i, old_ret[0][l], new_ret[0][l]))
        rxq[i] = new_ret[0][i] - old_ret[0][i]
        txq[i] = new_ret[1][i] - old_ret[1][i]

    for i in old_ret[2]:
        agg[i] = new_ret[2][i] - old_ret[2][i]

    return [rxq, txq, agg]

def print_diff(diff):
    line = ""
    rx_sum = 0
    tx_sum = 0
    for i in range(len(diff[0])):
        val = str(i)
        rx_val = int(diff[0][val])
        tx_val = int(diff[1][val])
        rx_sum += rx_val
        tx_sum += tx_val
        #line += "[Q{0} {1:5d} {2:5d}] ".format(val, rx_val // 1000, tx_val // 1000)
        #line += "[Q{0} {1:5d}K/s({2:2d})] ".format(val, rx_val // 1000, (rx_val - tx_val) // 1000)
        line += "[Q{0} {1:5d}K/s] ".format(val, rx_val // 1000)
    line += "[Q{0} {1:5d}K/s {2:5d}K/s -> {3:5d}K/s]".format("T", rx_sum // 1000,
        diff[2]['rx_sum'] // 1000, diff[2]['tx_sum'] // 1000)

    print(line)


def run_nic(name):
    ret = []
    while True:
        ret_new = read_nic(name)
        if not ret:
            ret = ret_new
            time.sleep(1)
            continue

        diff = make_diff(ret, ret_new)
        ret = ret_new
        print_diff(diff)
        time.sleep(1)

run_nic(sys.argv[1])
